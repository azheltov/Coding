"""
Array-1 > firstLast6
Given an array of ints, return true if 6 appears as either the first or last element in the array. The array will be length 1 or more.

firstLast6([1, 2, 6]) → true
firstLast6([6, 1, 2, 3]) → true
firstLast6([13, 6, 1, 2, 3]) → false
"""

public boolean firstLast6(int[] nums) {
  if ((nums[nums.length-1] == 6) || (nums[0] == 6)) {
    return true; }
  else {
    return false;
  }
  }
//////////////////////////////////////////////////////////////////////////////////////////////
Array-1 > sameFirstLast
Given an array of ints, return true if the array is length 1 or more, and the first element and the last element are equal.


sameFirstLast([1, 2, 3]) → false
sameFirstLast([1, 2, 3, 1]) → true
sameFirstLast([1, 2, 1]) → true

public boolean sameFirstLast(int[] nums) {
  if ((nums.length >= 1) && (nums[nums.length-1] == nums[0])) {
    return true;
  }
  else {
  return false;
  }
}
//////////////////////////////////////////////////////////////////////////////////////////////
Array-1 > makePi
Return an int array length 3 containing the first 3 digits of pi, {3, 1, 4}.


makePi() → [3, 1, 4]

public int[] makePi() {
  int[] makePi = {3,1,4};
  return makePi;
}
//////////////////////////////////////////////////////////////////////////////////////////////
Array-1 > commonEnd
Given 2 arrays of ints, a and b, return true if they have the same first element or they have the same last element. Both arrays will be length 1 or more.


commonEnd([1, 2, 3], [7, 3]) → true
commonEnd([1, 2, 3], [7, 3, 2]) → false
commonEnd([1, 2, 3], [1, 3]) → true

public boolean commonEnd(int[] a, int[] b) {
  
  if (a[0] == b[0] || a[a.length-1] == b[b.length-1]) {
    return true;
  }
  else {
    return false;
  }
}
//////////////////////////////////////////////////////////////////////////////////////////////
Array-1 > sum3
Given an array of ints length 3, return the sum of all the elements.


sum3([1, 2, 3]) → 6
sum3([5, 11, 2]) → 18
sum3([7, 0, 0]) → 7

public int sum3(int[] nums) {
  return nums[0]+nums[1]+nums[2];
}
//////////////////////////////////////////////////////////////////////////////////////////////
Array-1 > rotateLeft3
Given an array of ints length 3, return an array with the elements "rotated left" so {1, 2, 3} yields {2, 3, 1}.


rotateLeft3([1, 2, 3]) → [2, 3, 1]
rotateLeft3([5, 11, 9]) → [11, 9, 5]
rotateLeft3([7, 0, 0]) → [0, 0, 7]

public int[] rotateLeft3(int[] nums) {
  int[] nums1 = {nums[1], nums[2], nums[0]};
  return nums1;
}
//////////////////////////////////////////////////////////////////////////////////////////////
Array-1 > reverse3

Given an array of ints length 3, return a new array with the elements in reverse order, so {1, 2, 3} becomes {3, 2, 1}.


reverse3([1, 2, 3]) → [3, 2, 1]
reverse3([5, 11, 9]) → [9, 11, 5]
reverse3([7, 0, 0]) → [0, 0, 7]

public int[] reverse3(int[] nums) {
    int[] nums1 = {nums[2], nums[1], nums[0]};
  return nums1;
}
//////////////////////////////////////////////////////////////////////////////////////////////
Array-1 > maxEnd3

Given an array of ints length 3, figure out which is larger, the first or last element in the array, and set all the other elements to be that value. Return the changed array.


maxEnd3([1, 2, 3]) → [3, 3, 3]
maxEnd3([11, 5, 9]) → [11, 11, 11]
maxEnd3([2, 11, 3]) → [3, 3, 3]

public int[] maxEnd3(int[] nums) {
 
  if (nums[0] > nums[2]){
  int[] nums1 = {nums[0], nums[0], nums[0]};
  return nums1;
  }
  else{
  int[] nums1 =  {nums[2], nums[2], nums[2]};
  return nums1;
  }
}
//////////////////////////////////////////////////////////////////////////////////////////////
Array-1 > sum2

Given an array of ints, return the sum of the first 2 elements in the array. If the array length is less than 2, just sum up the elements that exist, returning 0 if the array is length 0.


sum2([1, 2, 3]) → 3
sum2([1, 1]) → 2
sum2([1, 1, 1, 1]) → 2

public int sum2(int[] nums) {
  if (nums.length==0) {
    return 0;
  }
  if (nums.length<2) {
    return nums[0];
  }
  else {
    return nums[1]+nums[0];
  }
}
//////////////////////////////////////////////////////////////////////////////////////////////
Array-1 > middleWay

Given 2 int arrays, a and b, each length 3, return a new array length 2 containing their middle elements.


middleWay([1, 2, 3], [4, 5, 6]) → [2, 5]
middleWay([7, 7, 7], [3, 8, 0]) → [7, 8]
middleWay([5, 2, 9], [1, 4, 5]) → [2, 4]

public int[] middleWay(int[] a, int[] b) {
  int[] aB = {a[1],b[1]};
  return aB;
}
//////////////////////////////////////////////////////////////////////////////////////////////
Array-1 > makeEnds

Given an array of ints, return a new array length 2 containing the first and last elements from the original array. The original array will be length 1 or more.


makeEnds([1, 2, 3]) → [1, 3]
makeEnds([1, 2, 3, 4]) → [1, 4]
makeEnds([7, 4, 6, 2]) → [7, 2]

public int[] makeEnds(int[] nums) {
  int[] x = {nums[0],nums[nums.length-1]};
  return x;
}
//////////////////////////////////////////////////////////////////////////////////////////////
Array-1 > has23

Given an int array length 2, return true if it contains a 2 or a 3.


has23([2, 5]) → true
has23([4, 3]) → true
has23([4, 5]) → false

public boolean has23(int[] nums) {
  if (((nums[0] == 2) || (nums [0] == 3)) || ((nums[1] == 2)||(nums[1] == 3))){
    return true;
  }

  else {
    return false;
  }
}
//////////////////////////////////////////////////////////////////////////////////////////////

Array-2 > countEvens

Return the number of even ints in the given array. Note: the % "mod" operator computes the remainder, e.g. 5 % 2 is 1.


countEvens([2, 1, 2, 3, 4]) → 3
countEvens([2, 2, 0]) → 3
countEvens([1, 3, 5]) → 0

public int countEvens(int[] nums) {
  int count = 0;
  for (int i=0; i<nums.length; i++) {
  if (nums[i] % 2 == 0) count++;
  }
  
  return count;
}
//////////////////////////////////////////////////////////////////////////////////////////////
Array-2 > bigDiff

Given an array length 1 or more of ints, return the difference between the largest and smallest values in the array.
Note: the built-in Math.min(v1, v2) and Math.max(v1, v2) methods return the smaller or larger of two values.


bigDiff([10, 3, 5, 6]) → 7
bigDiff([7, 2, 10, 9]) → 8
bigDiff([2, 10, 7, 2]) → 8

public int bigDiff(int[] nums) {
  int min = nums[0];
  int max = nums[0];
  for (int i = 0; i < nums.length; i++) {
    min = Math.min(nums[i],min);
    max = Math.max(nums[i],max);
  }
  return max - min;
}

//////////////////////////////////////////////////////////////////////////////////////////////
Array-2 > centeredAverage

Return the "centered" average of an array of ints, which we'll say is the mean average of the values,
except ignoring the largest and smallest values in the array. If there are multiple copies of the smallest value,
ignore just one copy, and likewise for the largest value. Use int division to produce the final average. 
You may assume that the array is length 3 or more.


centeredAverage([1, 2, 3, 4, 100]) → 3
centeredAverage([1, 1, 5, 5, 10, 8, 7]) → 5
centeredAverage([-10, -4, -2, -4, -2, 0]) → -3
//////////////////////////////////////////////////////////////////////////////////////////////6
//////////////////////////////////////////////////////////////////////////////////////////////
Array-2 > sum13

Return the sum of the numbers in the array, returning 0 for an empty array. Except the number 13 is very unlucky,
so it does not count and numbers that come immediately after a 13 also do not count.


sum13([1, 2, 2, 1]) → 6
sum13([1, 1]) → 2
sum13([1, 2, 2, 1, 13]) → 6

public int sum13(int[] nums) {
  int sum = 0;
  for (int i = 0; i < nums.length; i++) {
    if (nums[i] != 13) {
      sum = sum + nums[i];
    }
    else {
      i++;
    }
  }
  return sum;
}
//////////////////////////////////////////////////////////////////////////////////////////////
Array-2 > sum67


Return the sum of the numbers in the array, except ignore sections of numbers starting
with a 6 and extending to the next 7 (every 6 will be followed by at least one 7). Return 0 for no numbers.

sum67([1, 2, 2]) → 5
sum67([1, 2, 2, 6, 99, 99, 7]) → 5
sum67([1, 1, 6, 7, 2]) → 4


public int sum67(int[] nums) {
  int sum = 0;
  for (int i = 0; i < nums.length; i++) {
    
    if (nums[i] == 6) {
      while (nums [i] != 7) i++;
    } 
    
    else {
      sum += nums[i];
  }
  }
  return sum;
}
//////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////
